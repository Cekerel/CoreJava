 package future; 2 3 import java.io.*; 4 import java.util.*; s import java.util.concurrent.*; 6
13
/** * ©version 1.01 2012-01-26 * author Cay Horstmann V public class FutureTest { public static void main(String[] args) { try (Scanner in = new Scanner(System.in)) { System.out.print("Enter base directory (e.g. /usr/local/jdk5.0/src): ")； String directory = in.nextLineO; System,out.print("Enter keyword (e.g. volatile): "); String keyword = in.nextline(); MatchCounter counter = new MatchCounter(new File(directory), keyword); FutureTask<Integer> task = new FutureTasko(counter); Thread t = new Thread(task); t.start(); try { System.out.println(task.get() + " matching files.")；
catch (ExecutionException e)
31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 SO SI S2 S3 S4 55 56 57 S6 S9 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 7S 76 77 78 79 80 81 82 83 84 8S 86 87
第 1 4 章 并 ? 683
e.printStackTraceO;
} catch (InterruptedException e)
/** * This task counts the files in a directory and its subdirectories that contain a given keyword. */ class MatchCounter implements Callable<Integer> { private File directory; private String keyword; t/ ** * Constructs a MatchCounter. * @param directory the directory in which to start the search * @param keyword the keyword to look for V public MatchCounter(File directory, String keyword) { this,directory = directory; this.keyword = keyword;
public Integer cal1() { int count = 0; try { File[] files = directory.listFilesO; List<Future<Integer» results = new ArrayListoQ; for (File file : files) if (file.isDirectory()) { MatchCounter counter = new MatchCounter(file, keyword); FutureTask<Integer> task = new FutureTasko(counter); results,add(task); Thread t = new Thread(task); t.startO; } else { if (search(file)) count++;
for (Future<Integer> result : results) try count += result.getO; } catch (ExecutionException e)
684 Java 核心技?
88 89
91 92 93 94 95
100 101 102 103
105 106 107 108 109 110
112
114
116 117 118 119 120 121 122 123
e.printStackTrace();
catch (InterruptedException e)
return count;
* Searches a file for a given keyword. * @param file the file to search * ©return true if the keyword is contained in the file V public boolean search(File file) { try { try (Scanner in = new Scanner(file, "UTF-8")) { boolean found = false; while (!found && in.hasNextLineO) { String line = in.nextLineO; if (line,contains(keyword)) found = true; } return found;
catch (IOException e) { return false;
